Bug List
---------------------------
getLastNum()

1) If minus precedes a negative number, the current negative number is not returned correctly.

Verified issue does not occur for other operators (+*/).

To reproduce:
3-1	> hit +/-
3-(-1)	> getLastNum runs
1)	> bug - should be (-1)

*Fixed 2/21*
Added logic to check for minus before negative number and change .substr() target accordingly.
---------------------------
flipSign()

1) If the padded zero (dot) is made negative and then made positive

Verified issue occurs regardless of preceding operator.
Verified issue does not occur if number is a zero-leading float (i.e. 0.1).

To reproduce:
3-	> hit .
3-0.	> hit +/- * this should not be legal *
3-(0)	> hit +/-
(0	> bug

* Fixed 2/21
Added logic to check last character in expression to see if it is a dot.
---------------------------
input()

1) Able to start an expression with an operator
2) Able to input concurrent operators.
3) Unable to input operator after a negative (due to blocking numbers directly after negative).

To reproduce issues 1 & 2:
Hit any operator multiple times before or after entering a number.

To reproduce issue 3:
3	> hit +/-
(-3)	> hit an operator (+-*/)
(-3)	> bug

* Fixed 2/21
1) Broke number and operator handling into separate functions.
2) Added logic to operator() to check for empty expression and if last character is an operator.
---------------------------
number()

1) Able to enter multiple leading zeros

To reproduce:
hit 0
hit 0 again

* Logged 2/23
1) Need to add logic to number() to check if lastNum == 0 and block other numbers if it is.

* Fixed 2/25
1) Added logic to number() to return currentExpression if lastChar == '0' and subsequent character isn't "."
    if ( lastChar.match("[)]") || ( lastNum.charAt(0) == "0" && lastNum.charAt(1) != "." ) ) {
---------------------------
operator()

1) Able to add an operator directly after the dot

To reproduce:
hit 3
hit .
hit +

* Logged 2/24
1) Need to add logic to operator() to check if lastChar == "." and block operators if it is.

* Fixed 2/25
1) Added logic to operator() to return currentExpression if lastChar == "."
     if ( currentExpression == "" || lastChar.match("[-+*/]") || lastChar == "." ) {
---------------------------
calculator.rb

1) Hitting = after entering a single number returns 0.
2) Calculator always returns floats.

To reproduce issue 1:
hit 3
hit =

To reproduce issue 2:
hit 2
hit +
hit 2
hit =

* Fixed 2/25
1) Added logic to get_result() to check operators array length and return num_1 if it's zero.
2) Added evaluate_result() to convert float to integer if decimal value is zero
---------------------------
calculator.rb

1) Divide negative integer results in divide by zero error

To reproduce:
1) Hit 1
2) Hit +/- key to flip to negative
3) Hit /
4) Hit 3
5) Hit =

* Logged 2/28
Error - ZeroDivision Error at /answer
- calculator.rb line 41
    num % num.to_i == 0 ? num.to_i : num
- calculator.rb line 67
	result = evaluate_result(result)  # check if number is an integer
---------------------------
calculator.rb

Hitting = twice for lonely negative number results in error

To reproduce:
1) Hit 3
2) Hit +/- key to flip to negative
3) Hit =
4) Hit = again

* Logged 2/28
Results in Error instead of negative number

Idea to fix:
- The = key is tied to form submit, so logic needs to be in calculator.rb
- Maybe add new method to check for lonely number?  Negative needs to keep parentheses
- Or block = key if no operators entered?
---------------------------